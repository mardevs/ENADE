import sqlite3
from pathlib import Path

def main():
    Path('../enade.db').unlink(missing_ok=True)

    db_con = sqlite3.connect('../enade.db')

    create_tables(db_con)

    db_con.close()


def create_tables(db_con):
    cur = db_con.cursor()
    cur.execute('''CREATE TABLE INSTITUICAO
            (ID_IES INTEGER PRIMARY KEY, CO_CATEG_ADM INTEGER, CO_ORG_ACAD INTEGER)''')
    
    cur.execute('''CREATE TABLE RESPOSTAS
            (ID_RESP INTEGER PRIMARY KEY AUTOINCREMENT, RESP_ESC_ALUNO_OBJ_FORMGERAL TEXT, RESP_ACERTO_OBJ_FORMGERAL TEXT, RESP_ESC_ALUNO_OBJ_COMP_ESPEC TEXT, RESP_ACERTO_OBJ_COMP_ESPEC TEXT)''')
    
    cur.execute('''CREATE TABLE CURSO
            (ID_CURSO INTEGER PRIMARY KEY, CO_GRUPO INTEGER, CO_MUNIC_CURSO INTEGER, CO_UF_CURSO INTEGER, CO_REGIAO_CURSO INTEGER)''')

    cur.execute('''CREATE TABLE GABARITO
            (ID_GAB INTEGER PRIMARY KEY AUTOINCREMENT, GAB_OBJ_FORMGERAL_ORIG TEXT, GAB_OBJ_FORMGERAL_FINAL TEXT, GAB_OBJ_COMP_ESPEC_ORIG TEXT, GAB_OBJ_COMP_ESPEC_FINAL TEXT)''')
            
    cur.execute('''CREATE TABLE DISCURSIVA
            (ID_DIS INTEGER PRIMARY KEY AUTOINCREMENT, TIPO_SITU_FORMGERAL_D1 INTEGER, TIPO_SITU_FORMGERAL_D2 INTEGER, TIPO_SITU_COMP_ESPEC_D1 INTEGER, TIPO_SITU_COMP_ESPEC_D2 INTEGER, TIPO_SITU_COMP_ESPEC_D3 INTEGER)''')

    cur.execute('''CREATE TABLE OBJETIVA
            (ID_OBJ INTEGER PRIMARY KEY AUTOINCREMENT, NUM_ITENS_OBJ_FORMGERAL INTEGER, NUM_ITENS_OBJ_FORMGERAL_ANULADOS INTEGER, NUM_ITENS_OBJ_FORMGERAL_COEFBAIXO INTEGER, NUM_ITENS_OBJ_FORMGERAL_N_APLICA INTEGER, NUM_ITENS_OBJ_COMP_ESPEC INTEGER, NUM_ITENS_OBJ_COMP_ESPEC_ANULADOS INTEGER, 
            NUM_ITENS_OBJ_COMP_ESPEC_COEFBAIXO INTEGER, NUM_ITENS_OBJ_COMP_ESPEC_N_APLICA INTEGER)''')

    cur.execute('''CREATE TABLE PERCEPCAO_PROVA
            (ID_PRV INTEGER PRIMARY KEY AUTOINCREMENT, Q_PERCEP_PROVA_1 TEXT, Q_PERCEP_PROVA_2 TEXT, Q_PERCEP_PROVA_3 TEXT, Q_PERCEP_PROVA_4 TEXT, Q_PERCEP_PROVA_5 TEXT, Q_PERCEP_PROVA_6 TEXT, 
            Q_PERCEP_PROVA_7 TEXT, Q_PERCEP_PROVA_8 TEXT, Q_PERCEP_PROVA_9 TEXT)''')

    cur.execute('''CREATE TABLE ALUNO
            (ID_INSCRICAO INTEGER PRIMARY KEY AUTOINCREMENT, NUM_IDADE INTEGER, TIPO_SEXO TEXT, ANO_FIM_EM INTEGER, ANO_INIC_GRAD INTEGER, CO_TURNO_GRADUACAO INTEGER, TIPO_INSCRICAO_ADM INTEGER, 
            TIPO_INSCRICAO INTEGER, CODIGO_MODALIDADE_ENSINO INTEGER)''')

    cur.execute('''CREATE TABLE LICENCIATURA
            (ID_LIC INTEGER PRIMARY KEY AUTOINCREMENT, Q_LICEN_69 TEXT, Q_LICEN_70 TEXT, Q_LICEN_71 TEXT, Q_LICEN_72 TEXT, Q_LICEN_73 TEXT, Q_LICEN_74 TEXT, Q_LICEN_75 TEXT, Q_LICEN_76 TEXT, Q_LICEN_77 TEXT, Q_LICEN_78 TEXT,
            Q_LICEN_79 TEXT, Q_LICEN_80 TEXT, Q_LICEN_81 TEXT)''')

    cur.execute('''CREATE TABLE PRESENCA
            (ID_PRES INTEGER PRIMARY KEY AUTOINCREMENT, TIPO_PRESENCA_GERAL INTEGER, TIPO_PRESENCA_OBJ_FORMGERAL INTEGER, TIPO_PRESENCA_DISC_FORMGERAL INTEGER, TIPO_PRESENCA_OBJ_COMP_ESPEC INTEGER, TIPO_PRESENCA_DISC_COMP_ESPEC INTEGER)''')

    cur.execute('''CREATE TABLE NOTAS
            (ID_NOTA INTEGER PRIMARY KEY AUTOINCREMENT, NOTA_GERAL REAL, NOTA_FORMGERAL REAL, NOTA_OBJ_FORMGERAL REAL, NOTA_DISC_FORMGERAL REAL, NOTA_FORMGERAL_D1 REAL, NOTA_FORMGERAL_D1_PT REAL, NOTA_FORMGERAL_D1_CT REAL, NOTA_FORMGERAL_D2 REAL, 
            NOTA_FORMGERAL_D2_PT REAL, NOTA_FORMGERAL_D2_CT REAL, NOTA_COMP_ESPEC REAL, NOTA_OBJ_COMP_ESPEC REAL, NOTA_DIS_COMP_ESPEC REAL, NOTA_COMP_ESPEC_D1 REAL, NOTA_COMP_ESPEC_D2 REAL, NOTA_COMP_ESPEC_D3 REAL)''')

    cur.execute('''CREATE TABLE SOCIOECONOMICO
            (ID_SOC INTEGER PRIMARY KEY AUTOINCREMENT, Q_SOCIOEC_01 TEXT, Q_SOCIOEC_02 TEXT, Q_SOCIOEC_03 TEXT, Q_SOCIOEC_04 TEXT, Q_SOCIOEC_05 TEXT, Q_SOCIOEC_06 TEXT, Q_SOCIOEC_07 TEXT, Q_SOCIOEC_08 TEXT, Q_SOCIOEC_09 TEXT, Q_SOCIOEC_10 TEXT,
            Q_SOCIOEC_11 TEXT, Q_SOCIOEC_12 TEXT, Q_SOCIOEC_13 TEXT, Q_SOCIOEC_14 TEXT, Q_SOCIOEC_15 TEXT, Q_SOCIOEC_16 INTEGER, Q_SOCIOEC_17 TEXT, Q_SOCIOEC_18 TEXT, Q_SOCIOEC_19 TEXT, Q_SOCIOEC_20 TEXT, Q_SOCIOEC_21 TEXT, Q_SOCIOEC_22 TEXT, Q_SOCIOEC_23 TEXT,
            Q_SOCIOEC_24 TEXT, Q_SOCIOEC_25 TEXT, Q_SOCIOEC_26 TEXT, Q_SOCIOEC_27 INTEGER, Q_SOCIOEC_28 INTEGER, Q_SOCIOEC_29 INTEGER, Q_SOCIOEC_30 INTEGER, Q_SOCIOEC_31 INTEGER, Q_SOCIOEC_32 INTEGER, Q_SOCIOEC_33 INTEGER, Q_SOCIOEC_34 INTEGER,
            Q_SOCIOEC_35 INTEGER, Q_SOCIOEC_36 INTEGER, Q_SOCIOEC_37 INTEGER, Q_SOCIOEC_38 INTEGER, Q_SOCIOEC_39 INTEGER, Q_SOCIOEC_40 INTEGER, Q_SOCIOEC_41 INTEGER, Q_SOCIOEC_42 INTEGER, Q_SOCIOEC_43 INTEGER, Q_SOCIOEC_44 INTEGER,
            Q_SOCIOEC_45 INTEGER, Q_SOCIOEC_46 INTEGER, Q_SOCIOEC_47 INTEGER, Q_SOCIOEC_48 INTEGER, Q_SOCIOEC_49 INTEGER, Q_SOCIOEC_50 INTEGER, Q_SOCIOEC_51 INTEGER, Q_SOCIOEC_52 INTEGER, Q_SOCIOEC_53 INTEGER, Q_SOCIOEC_54 INTEGER, Q_SOCIOEC_55 INTEGER,
            Q_SOCIOEC_56 INTEGER, Q_SOCIOEC_57 INTEGER, Q_SOCIOEC_58 INTEGER, Q_SOCIOEC_59 INTEGER, Q_SOCIOEC_60 INTEGER, Q_SOCIOEC_61 INTEGER, Q_SOCIOEC_62 INTEGER, Q_SOCIOEC_63 INTEGER, Q_SOCIOEC_64 INTEGER, Q_SOCIOEC_65 INTEGER, Q_SOCIOEC_66 INTEGER,
            Q_SOCIOEC_67 INTEGER, Q_SOCIOEC_68 INTEGER)''')

    cur.execute('''CREATE TABLE EXAME
            (ID_EXAME INTEGER PRIMARY KEY AUTOINCREMENT, ID_IES INTEGER, ID_CURSO INTEGER, ID_ALUNO INTEGER, ID_NOTA INTEGER, ID_GABARITO INTEGER, ID_OBJETIVAS INTEGER, ID_DISCURSIVAS INTEGER,
            ID_LICENCIATURA INTEGER, ID_SOCIOECON INTEGER, ID_RESPOSTAS INTEGER, ID_PRESENCA INTEGER, ID_PROVA INTEGER, NUM_ANO INTEGER, TIPO_PRESENCA INTEGER,
            FOREIGN KEY (ID_IES) REFERENCES INSTITUICAO(ID_IES), 
            FOREIGN KEY (ID_CURSO) REFERENCES CURSO(ID_CURSO), 
            FOREIGN KEY (ID_ALUNO) REFERENCES ALUNO(ID_INSCRICAO),
            FOREIGN KEY (ID_NOTA) REFERENCES NOTAS(ID_NOTA),
            FOREIGN KEY (ID_GABARITO) REFERENCES GABARITO(ID_GAB),
            FOREIGN KEY (ID_DISCURSIVAS) REFERENCES DISCURSIVA(ID_DIS),
            FOREIGN KEY (ID_LICENCIATURA) REFERENCES LICENCIATURA(ID_LIC),
            FOREIGN KEY (ID_OBJETIVAS) REFERENCES OBJETIVA(ID_OBJ),
            FOREIGN KEY (ID_SOCIOECON) REFERENCES SOCIOECONOMICO(ID_SOC),
            FOREIGN KEY (ID_RESPOSTAS) REFERENCES RESPOSTAS(ID_RESP),
            FOREIGN KEY (ID_PRESENCA) REFERENCES PRESENCA(ID_PRES),
            FOREIGN KEY (ID_PROVA) REFERENCES P_PROVA(ID_PRV)
            )''')

    db_con.commit()

if __name__ == '__main__':
    main()